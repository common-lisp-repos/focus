\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2015 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of FoCus.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename focus-user.info
@settitle The FoCus User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0 beta 1 "Kokyu Ho"
@set COPYRIGHT_DATE 2015
@setchapternewpage odd
@documentdescription
The FoCus User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro focus
@t{FoCus}
@end macro

@macro Fmt
@code{Format}
@end macro

@macro fmt
@code{format}
@end macro

@macro fmter
@code{formatter}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro nil
@code{nil}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@vindex net.didierverna.focus.configuration
@cindex Configuration Option, @t{:\name\}
@cindex @t{:\name\}
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex \var\
@vindex @r{Constant, }\var\
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex \var\
@vindex @r{Parameter, }\var\
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* FoCus User: (focus-user).             The FoCus User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The FoCus User Manual
@subtitle Customizable FORMAT strings and directives, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The FoCus User Manual

This is the @focus{} User Manual for @focus{} version @value{VERSION}.

@menu
* Copying::             The BSD license
* Introduction::        FoCus at a glance
* Installation::        Library and documentation
* Quick Start::         For the brave and the impatient
* Usage::               All the details
* Advanced Usage::      And then some
* Conclusion::          That's all folks
* Technical Notes::     Configuration, platforms and portability
* Indexes::             Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction

@Fmt{} is a powerful utility in the @cl{} standard. Format strings are
written in what can be considered as a printing DSL (Domain Specific
Language). However powerful that language is though, it suffers from two
important limitations.

@enumerate
@item
It is not modifiable: only a predefined set of standard directive
characters can be used and it is not possible to alter their semantics.
@item
It is hardly extensible. The only embryonic extension mechanism
available, the @code{/} directive, is extremely cumbersome to use. The
called function must either reside in the @code{cl-user} package, or you
must always use its fully qualified name in the format string, even if
the corresponding code lies in the appropriate package. For instance,
consider that there is a function called @code{my-format-function} in
the package named @code{:my.long.package.name}. Every time you want to
use this function, you need to write something like
@verbatim
(format t "~/my.long.package.name:my-format-function/" ...)
@end verbatim
which essentially makes the @code{/} directive unusable.
@end enumerate

@focus{} is a library designed to circumvent those limitations. It
allows you to customize the @fmt{} DSL by adding new directive
characters or modifying the standard ones. The semantics of these
directive characters is specified in a so-called @dfn{format table}, a
concept very close to that of readtables. @focus{} ultimately translates
into regular @fmt{} calls.

This is the @focus{} user manual. @focus{} also comes with a
@ifinfo
@ref{Top, , Reference Manual, focus-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo

@ref{Quick Start} provides a very short example in order to give an
overview of what's coming next.



@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Quick Start, Introduction, Top
@chapter Installation

@xref{Supported Platforms}, for information on portability or
requirements.  See @focus{}'s
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#focus,,homepage}
for tarballs, Git repository and online documentation. @focus{} is also
available via @uref{http://www.quicklisp.org,,Quicklisp}.

In order to install and load the bare Lisp library, unpack it somewhere
in the ASDF 3 source registry and type this at the REPL:
@sysindex{net.didierverna.focus}
@verbatim
(asdf:load-system :net.didierverna.focus)
@end verbatim

In addition to the bare Lisp library, the @focus{} distribution offers
documentation in the form of 2 different manuals. If you want to benefit
from all those wonders, some bits of manual installation are
needed. After unpacking somewhere in the ASDF 3 source registry, please
perform the following steps, in order.

@enumerate
@item
Edit @file{make/config.make} to your specific needs.

@item
Type @command{make} to compile the documentation (user manual and
lpossibly reference manual). By default, the documentation is built in
info, PDF and HTML formats. If you want other formats (DVI and
PostScript are available), type @command{make all-formats}. You can also
type individually @command{make dvi} and/or @command{make ps} in order
to get the corresponding format.

@item
As documented in @file{make/config.make}, the reference manual is only
generated if you have SBCL and the Declt library at hand (see
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#declt}).

@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and PostScript format, those will be
installed as well.
@end enumerate

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Quick Start
@c ====================================================================
@node Quick Start, Usage, Installation, Top
@chapter Quick Start
In this chapter, we assume that you have properly installed @focus{}
(@pxref{Installation}), and we build a short example to get you started.

Suppose you're writing a ``quotation'' library which outputs a lot of
quotations, enclosed in (back)quotes like this: @samp{it's raining cats
and dogs}. If you're doing this very often, a pattern will quickly
arise: @verb{|(format t "`~A'" quotation)|}, which you could abstract
away with a custom formatting function called @code{quotation-formatter}
for instance.

The problem, of course, is that writing this
@verbatim
(format t "~/quotation:quotation-formatter/" quotation)
@end verbatim
is longer than doing it the quick'n dirty way, which is quite
frustrating. That's where @focus{} comes to the rescue. What if you had
a new @fmt{} directive, say, @code{`}, that would do the quotation of its
argument? This is what we are going to do now.

@menu
* Full Source::         The complete source code
* Explanation::         Step-by-step code walking
@end menu


@c -----------
@c Full Source
@c -----------
@page
@node Full Source, Explanation, Quick Start, Quick Start
@section Full Source
The complete source code is given below. You can just cut'n paste it in
a @sc{repl} and it will (should) work. It is also contained in a file
called @file{demos/quickstart.lisp} in the distribution. You can try it
out with, @eg{}, @samp{sbcl --script} in a terminal.

@cartouche
@verbatim
(in-package :cl-user)

(require "asdf")
(asdf:load-system :net.didierverna.focus)
(net.didierverna.focus:nickname-package)


(defpackage :quotation
  (:use :cl)
  (:export :quotation))

(in-package :quotation)

(defun quotation-formatter (stream argument colonp atsignp &rest arguments)
  (declare (ignore colonp atsignp arguments))
  (write-char #\` stream)
  (write-string argument stream)
  (write-char #\' stream))

(focus:make-format-table :name :quotation)
(focus:set-format-directive #\`
  :function 'quotation-formatter :table :quotation)

(defun quotation (who quotation)
  (focus:with-format-table :quotation
    (focus:format t "As ~A would say: ~`.~%" who quotation)))


(in-package :cl-user)

(quotation:quotation "Bugs Bunny" "Errr, what's up Doc?")
@end verbatim
@end cartouche


@c -----------
@c Explanation
@c -----------
@node Explanation, , Full Source, Quick Start
@section Explanation
Let's examine this program step-by-step now.

@sysindex{net.didierverna.focus}@c
@pkgindex{net.didierverna.focus}@c
First, we put ourselves in the @cl{} user package, and load @focus{} from
its ASDF system @samp{net.didierverna.focus}. @focus{} lives in a
package also named @samp{net.didierverna.focus}, that we nickname
immediately.

@cartouche
@verbatim
(in-package :cl-user)

(require "asdf")
(asdf:load-system :net.didierverna.focus)
(net.didierverna.focus:nickname-package)
@end verbatim
@end cartouche

Nicknaming the package is convenient when you're not @code{:use}'ing it
(which is not recommended anyway) and you find its name too
long. @focus{} provides a function for doing this automatically.

@cindex Package, nicknames
@defun nickname-package &optional NICKNAME
Add @var{NICKNAME} (@code{:focus} by default) to the
@code{:NET.DIDIERVERNA.FOCUS} package.
@end defun

Next, we create our own @code{:quotation} package (don't do that for
real!), and provide a @code{quotation-formatter} function that will
write its string argument between a pair of (back)quotes. Note that this
is the kind of function that you would use in the standard @code{/}
format directive.
@cartouche
@verbatim
(defpackage :quotation
  (:use :cl)
  (:export :quotation))

(in-package :quotation)

(defun quotation-formatter (stream argument colonp atsignp &rest arguments)
  (declare (ignore colonp atsignp arguments))
  (write-char #\` stream)
  (write-string argument stream)
  (write-char #\' stream))
@end verbatim
@end cartouche

@cindex Format Table
The interesting part comes now. @focus{} uses so-called @dfn{format
tables} to store the mappings between directive characters and their
behavior. Much like what a readtable does with macro characters. Below,
we create a new format table named @code{:quotation} and install a new
(non-standard) format directive inside it. By default, new format tables
inherit the standard @fmt{} behavior. Here, we just add a new directive
character, @code{`} (backquote) and map it to the
@code{quotation-formatter} function.

@findex make-format-table
@findex set-format-directive
@cartouche
@verbatim
(focus:make-format-table :name :quotation)
(focus:set-format-directive #\`
  :function 'quotation-formatter :table :quotation)
@end verbatim
@end cartouche

@cindex Current Format Table
@cindex Format Table, current
Now, let's create a silly @code{quotation} function for printing
someone's quote. @focus{} provides its own @code{format} function which
wraps around the standard one. This function works exactly like the
original @fmt{}, except that it uses the so-called @dfn{current format
table} to interpret your custom format string. One way of making sure
that the current format table is the appropriate one is to use the macro
@code{with-format-table}.

@findex with-format-table
@findex format
@cartouche
@verbatim
(defun quotation (who quotation)
  (focus:with-format-table :quotation
    (focus:format t "As ~A would say: ~`.~%" who quotation)))
@end verbatim
@end cartouche

Finally, let's try it!
@cartouche
@verbatim
(in-package :cl-user)

(quotation:quotation "Bugs Bunny" "What's Up Doc?")
@end verbatim
@end cartouche



@c ====================================================================
@c Usage
@c ====================================================================
@node Usage, Advanced Usage, Quick Start, Top
@chapter Usage

@pkgindex{net.didierverna.focus}
@focus{} itself resides in a package called @t{net.didierverna.focus}. You
can automatically nickname this package with the following function.
@cindex Package, nicknames
@defun nickname-package [NICKNAME]
Add @var{NICKNAME} (@code{:focus} by default) to the
@code{:net.didierverna.focus} package.
@end defun



@c ====================================================================
@c Advanced Usage
@c ====================================================================
@node Advanced Usage, Conclusion, Usage, Top
@chapter Advanced Usage

This section contains information about different features that are
present in @focus{} because of design decisions, but that I expect to be
used only rarely, if at all.

@menu
* Version Numbering::           In case you need to conditionalize
@end menu


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering, , , Advanced Usage
@section Version Numbering

As @focus{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@focus{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @focus{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @focus{} version is characterized by 4 elements as described below.
@itemize
@item
@pvindex{*release-major-level*}
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@pvindex{*release-minor-level*}
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@pvindex{*release-status*}
A release status stored in the parameter
@code{*release-status*}. The status of a release can be @code{:alpha},
@code{:beta}, @code{:rc} (standing for ``release candidate'') or
@code{:patchlevel}. These are in effect 4 levels of expected stability.
@item
@pvindex{*release-status-level*}
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{*release-name*}
In addition to that, each version of @focus{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @focus{}
is ``Aïkido movements''.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major . 10000 + minor .
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Kote Gaeshi", 2.5 beta 8 "Irimi
Nage", 4.2 release candidate 1 "San Kyo" or 4.3.2 "Suwari Wasa Shomen
Uchi Ikkyo". As for the short version, a patchlevel of 0 is ignored in
the output: 1.3 "Ju Wasa".
@end itemize



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Technical Notes, Advanced Usage, Top
@chapter Conclusion

So that's it I guess. You know all about @focus{} now. The next step is
to actually use it and make your FORMAT strings even less readable than
the original ones.

Now, go my friend. Go obfuscate your Lisp printing code!



@c ====================================================================
@c Technical Notes
@c ====================================================================
@node Technical Notes, Indexes, Conclusion, Top
@appendix Technical Notes

This chapter contains important information about the library's
configuration and portability concerns.

@menu
* Configuration::               Pre-loading parameters
* Supported Platforms::         Systems, compilers and dependencies
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Supported Platforms, Technical Notes, Technical Notes
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.focus.setup}@c
@pkgindex{net.didierverna.focus.setup}@c
Some aspects of @focus{}'s behavior can be configured @emph{before} the
library system is actually loaded. @focus{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.focus.setup} (and the eponym
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.focus.setup)
(net.didierverna.focus.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @focus{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @focus{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @focus{} itself. The library provides indentation information
for some of its functions directly embedded in the code. This
information can be automatically transmitted to (X)Emacs when the ASDF
system is loaded if you set this option to @code{t}. However, note that
for this to work, the Slime variable
@code{slime-enable-evaluate-in-emacs} must also be set to @code{t} in
your (X)Emacs session. If you're interested to know how this process
works, I have described it in the following blog entry:
@uref{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack}.
@end table


@c ----------------------
@c Supported Platforms
@c ----------------------
@node Supported Platforms, , Configuration, Technical Notes
@section Supported Platforms

@focus{} is an ASDF 3 library. It doesn't have any system, platform or
compiler-specific requirement, so portability problems should be
regarded as bugs, and reported to @email{didier@@didierverna.net, me}
(please). This includes potential problems using either the standard or
modern version of Allegro @cl{}.



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Technical Notes, Top
@appendix Indexes

@menu
* Concept Index::       Well, the concept index
* Function Index::      Well, the function index
* Variable Index::      Well, the variable index
* Data Type Index::     Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index, , Variable Index, Indexes
@section Data Types
@printindex tp


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c user.texi ends here

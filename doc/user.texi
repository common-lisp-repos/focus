\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2015 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of FoCus.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename focus-user.info
@settitle The FoCus User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0 beta 1 "Kokyu Ho"
@set COPYRIGHT_DATE 2015
@setchapternewpage odd
@documentdescription
The FoCus User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro focus
@t{FoCus}
@end macro

@macro Fmt
@code{Format}
@end macro

@macro fmt
@code{format}
@end macro

@macro fmter
@code{formatter}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@cindex Configuration Option, @t{:\name\}
@cindex @t{:\name\}, configuration option
@end macro

@c Features
@macro featindex{name}
@cindex Feature, @t{:\name\}
@cindex @t{:\name\}, feature
@end macro

@c Extensions
@macro extindex{name}
@featindex{net.didierverna.focus.\name\}
@cindex Extension, @t{\name\}
@cindex @t{\name\}, extension
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex +\var\+@r{, constant}
@vindex @r{Constant, }+\var\+
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex *\var\*@r{, parameter}
@vindex @r{Parameter, }*\var\*
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\@r{, package}
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\@r{, system}
@tpindex @r{System, }\name\
@end macro

@c Errors
@macro errindex{name}
@tpindex \name\@r{, error}
@tpindex @r{Error, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* FoCus User: (focus-user).             The FoCus User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The FoCus User Manual
@subtitle Customizable format strings and directives, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The FoCus User Manual

This is the @focus{} User Manual for @focus{} version @value{VERSION}.

@menu
* Copying::             The BSD license
* Introduction::        FoCus at a glance
* Installation::        Library and documentation
* Quick Start::         For the brave and the impatient
* Usage::               All the details
* Miscellaneous::      And then some
* Conclusion::          That's all folks
* Technical Notes::     Configuration, platforms and portability
* Indexes::             Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction

@Fmt{} is a powerful utility in the @cl{} standard. Format strings are
written in what can be considered as a printing DSL (Domain Specific
Language). However powerful that language is though, it suffers from two
important limitations.

@enumerate
@item
It is not modifiable: only a predefined set of standard directive
characters can be used and it is not possible to alter their semantics.
@item
It is hardly extensible. The only embryonic extension mechanism
available, the @code{~/} directive, is extremely cumbersome to use. The
called function must either reside in the @code{cl-user} package, or you
must always use its fully qualified name in the format string, even if
the corresponding code lies in the appropriate package. For instance,
consider that there is a function called @code{my-format-function} in
the package named @code{:my.long.package.name}. Every time you want to
use this function, you need to write something like
@verbatim
(format t "~/my.long.package.name:my-format-function/" ...)
@end verbatim
which essentially makes the @code{/} directive unusable.
@end enumerate

@focus{} is a library designed to circumvent those limitations. It
allows you to customize the @fmt{} DSL by adding new directive
characters or modifying the standard ones. The semantics of these
directive characters is specified in a so-called @dfn{format table}, a
concept very close to that of readtables. @focus{} ultimately translates
into regular @fmt{} calls.

This is the @focus{} user manual. @focus{} also comes with a
@ifinfo
@ref{Top, , Reference Manual, focus-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo

@ref{Quick Start} provides a very short example in order to give an
overview of what's coming next. @ref{Usage} explains in detail how to
use the library.



@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Quick Start, Introduction, Top
@chapter Installation

@xref{Supported Platforms}, for information on portability or
requirements.  See @focus{}'s
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#focus,,homepage}
for tarballs, Git repository and online documentation. @focus{} is also
available via @uref{http://www.quicklisp.org,,Quicklisp}.

In order to install and load the bare Lisp library, unpack it somewhere
in the ASDF 3 source registry and type this at the REPL:
@sysindex{net.didierverna.focus}
@verbatim
(asdf:load-system :net.didierverna.focus)
@end verbatim
@sysindex{net.didierverna.focus.core}
Alternatively, if you just want to use the core library without the
extensions (@pxref{Technical Notes}), you can also just load the
@samp{net.didierverna.focus.core} system.

In addition to the bare Lisp library, the @focus{} distribution offers
documentation in the form of 2 different manuals. If you want to benefit
from all those wonders, some bits of manual installation are
needed. After unpacking somewhere in the ASDF 3 source registry, please
perform the following steps, in order.

@enumerate
@item
Edit @file{make/config.make} to your specific needs.
@item
Type @command{make} to compile the documentation (user manual and
lpossibly reference manual). By default, the documentation is built in
info, PDF and HTML formats. If you want other formats (DVI and
PostScript are available), type @command{make all-formats}. You can also
type individually @command{make dvi} and/or @command{make ps} in order
to get the corresponding format.
@item
As documented in @file{make/config.make}, the reference manual is only
generated if you have SBCL and the Declt library at hand (see
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#declt}).
@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and PostScript format, those will be
installed as well.
@end enumerate

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Quick Start
@c ====================================================================
@node Quick Start, Usage, Installation, Top
@chapter Quick Start
In this chapter, we assume that you have properly installed @focus{}
(@pxref{Installation}), and we build a short example to get you started.

Suppose you're writing a ``quotation'' library which outputs a lot of
quotations, enclosed in (back)quotes like this: @samp{it's raining cats
and dogs}. If you're doing this very often, a pattern will quickly
arise: @verb{|(format t "`~A'" quotation)|}, which you could abstract
away with a custom formatting function called @code{quotation-formatter}
for instance.

The problem, of course, is that writing this
@verbatim
(format t "~/quotation:quotation-formatter/" quotation)
@end verbatim
is longer than doing it the quick'n dirty way, which is quite
frustrating. That's where @focus{} comes to the rescue. What if you had
a new @fmt{} directive, say, @code{~`}, that would do the quotation of its
argument? This is what we are going to do now.

@menu
* Full Source::         The complete source code
* Explanation::         Step-by-step code walking
@end menu


@c -----------
@c Full Source
@c -----------
@page
@node Full Source, Explanation, Quick Start, Quick Start
@section Full Source
The complete source code is given below. You can just cut'n paste it in
a @sc{repl} and it will (should) work. It is also contained in a file
called @file{demos/quickstart.lisp} in the distribution (along with
other demo programs). You can try it out with, @eg{}, @samp{sbcl
--script} in a terminal.

@cartouche
@verbatim
(in-package :cl-user)

(require "asdf")
(asdf:load-system :net.didierverna.focus)
(net.didierverna.focus:nickname-package)


(defpackage :quotation
  (:use :cl)
  (:export :quotation))

(in-package :quotation)

(defun quotation-formatter (stream argument colonp atsignp &rest arguments)
  (declare (ignore colonp atsignp arguments))
  (write-char #\` stream)
  (write-string argument stream)
  (write-char #\' stream))

(let ((table (focus:make-format-table)))
  (focus:with-format-table table
    (focus:set-format-directive #\` :function 'quotation-formatter))

  (defun quotation (who quotation)
    (focus:with-format-table table
      (focus:format t "As ~A would say: ~`.~%" who quotation))))


(in-package :cl-user)

(quotation:quotation "Bugs Bunny" "Errr, what's up Doc?")
@end verbatim
@end cartouche


@c -----------
@c Explanation
@c -----------
@node Explanation, , Full Source, Quick Start
@section Explanation
Let's examine this program step-by-step now.

@cindex Package, nicknames
@findex nickname-package
@sysindex{net.didierverna.focus}@c
@pkgindex{net.didierverna.focus}@c
First, we put ourselves in the @cl{} user package, and load @focus{}
from its ASDF system @samp{net.didierverna.focus}. @focus{} lives in a
package also named @samp{net.didierverna.focus}, that we nickname to
just @code{focus} immediately, thanks to the function
@code{nickname-package}.
@cartouche
@verbatim
(in-package :cl-user)

(require "asdf")
(asdf:load-system :net.didierverna.focus)
(net.didierverna.focus:nickname-package)
@end verbatim
@end cartouche

Next, we create our own @code{:quotation} package (don't do that for
real!), and provide a @code{quotation-formatter} function that will
write its string argument between a pair of (back)quotes. Note that this
is the kind of function that you would use in the standard @code{~/}
format directive.
@cartouche
@verbatim
(defpackage :quotation
  (:use :cl)
  (:export :quotation))

(in-package :quotation)

(defun quotation-formatter (stream argument colonp atsignp &rest arguments)
  (declare (ignore colonp atsignp arguments))
  (write-char #\` stream)
  (write-string argument stream)
  (write-char #\' stream))
@end verbatim
@end cartouche

@cindex Format Table
@findex make-format-table
The interesting part comes now. @focus{} uses so-called @dfn{format
tables} to store the mappings between directive characters and their
behavior. Much like what a readtable does with macro characters. So
let's create a new format table. This is done with the function
@code{make-format-table}.
@cartouche
@verbatim
(let ((table (focus:make-format-table)))
@end verbatim
@end cartouche

@cindex Current Format Table
@cindex Format Table, current
@findex with-format-table
@findex set-format-directive
By default, new format tables inherit the standard @fmt{} behavior (that
is, all standard directives are recognized). Let's add a new directive
character, @code{`} (backquote) to our new format table, and map it to
the @code{quotation-formatter} function. This is done with the function
@code{set-format-directive}. By default, @focus{} works with the
so-called @dfn{current format table}. One way of making sure that the
current format table is the appropriate one is to use the macro
@code{with-format-table}.
@cartouche
@verbatim
  (focus:with-format-table table
    (focus:set-format-directive #\` :function 'quotation-formatter))
@end verbatim
@end cartouche

@findex format
Now, let's create a silly @code{quotation} function for printing
someone's quote. @focus{} provides its own @fmt{} function which wraps
around the standard one. This function works exactly like the original
@fmt{}, except that it uses the current format table to interpret your
custom format string, so again, we need to make sure that the proper
table is used when the function is called.
@cartouche
@verbatim
  (defun quotation (who quotation)
    (focus:with-format-table table
      (focus:format t "As ~A would say: ~`.~%" who quotation))))
@end verbatim
@end cartouche

Finally, let's try it!
@cartouche
@verbatim
(in-package :cl-user)

(quotation:quotation "Bugs Bunny" "What's Up Doc?")
@end verbatim
@end cartouche



@c ====================================================================
@c Usage
@c ====================================================================
@node Usage, Miscellaneous, Quick Start, Top
@chapter Usage
Just when you thought format strings were unreadable, it's going to get
a whole lot crazier. With @focus{}, you can not only create your own
cryptic format directives, but you can also completely mess up the
standard ones, which is where the fun really begins.

@pkgindex{net.didierverna.focus}@c
First of all, @focus{} itself resides in a package called
@t{net.didierverna.focus}. You can automatically nickname this package
with the following function.
@cindex Package, nicknames
@defun nickname-package &optional NICKNAME
@foindex{nickname-package, nickname}@c
Add @var{NICKNAME} (@code{:focus} by default) to the
@code{:net.didierverna.focus} package.
@end defun

Using @focus{} involves three steps: creating format tables, filling
them with format directives and actually using them in calls to @fmt{}
or @fmter{}.

@menu
* Creating Format Tables::      Where your custom directives are stored
* Referring to Format Tables::  Interlude: format table designators
* Modifying Format Tables::     Adding, changing or removing directives
* Using Format Tables::         Actually formatting things
* Compile or Run Time::         When FoCus acts
@end menu


@c ----------------------
@c Creating Format Tables
@c ----------------------
@node Creating Format Tables, Referring to Format Tables, Usage, Usage
@section Creating Format Tables
@cindex Format Table
In order to use custom format strings, you first need to create a
so-called @dfn{format table}. A format table stores mappings between
format directives (represented by their directive characters) and their
intended meaning. In essence, a format table is very similar to a
readtable: it describes how @focus{} is to interpret your custom format
strings in order to translate them into standard ones.  Creating a
format table is done by calling the function @code{make-format-table}.

@foindex{make-format-table, initially}@c
@defun make-format-table &optional (INITIALLY :standard)
Create and return a new format table.@*
@end defun

@cindex Directive Casing
@cindex Casing, directive
The optional argument @var{INITIALLY} lets you decide what you want the
table to look like when it's created. A value of @code{:standard}
creates a format table behaving exactly like standard
@fmt{}. @code{:standard-downcase} and @code{:standard-upcase} do the
same, except that when applicable, only the downcase (respectively
upcase) directive characters are added (See also @ref{Casing}). Finally,
a @code{:blank} format table does not contain any directive at all.


@c --------------------------
@c Referring to Format Tables
@c --------------------------
@node Referring to Format Tables, Modifying Format Tables, Creating Format Tables, Usage
@section Interlude: Referring to Format Tables
Gosh, that was a lot to digest, I know. Sorry. Let's pause for a moment
and catch our breath.

@cindex Format Table Designator
@cindex Designator, format table
Whether it is to modify them or to actually use them, the rest of the
library needs to refer to format tables in one way or another. You refer
to a specific format table by using a so-called @dfn{format table
designator}. Format table designators can be of various forms.

@cindex Format Table Registration
@cindex Registration, format table
@cindex Current Format Table
@cindex Format Table, current
@findex make-format-table
First of all, it is possible to use a table object directly (as returned
by @code{make-format-table}). You may also refer to a format table by
name, if you have @emph{registered} it (@pxref{Table Registration}) and
finally, if you don't specify anything, the so-called @dfn{current
format table} is used (@pxref{Current Format Table}).

@menu
* Table Registration::          Naming format tables
* Current Format Table::        The default format table
@end menu

@node Table Registration, Current Format Table, Referring to Format Tables, Referring to Format Tables
@subsection Table Registration
@cindex Format Table Registration
@cindex Registration, format table
@findex register-format-table
@findex unregister-format-table
If you plan to manipulate several format tables in the same application,
you may want to give them names. This process is called
@dfn{registration}. You can register a format table with the
@code{register-format-table} function. The opposite (un-naming a table,
if you prefer) is done with the @code{unregister-format-table} function.

@defun register-format-table TABLE NAME &optional FORCE
Register @var{TABLE} under @var{NAME} (a symbol) and return it.
@end defun
@foindex{register-format-table,force}@c
@errindex{table-collison}@c
If a table is already registered under that name, @focus{} throws a
@code{table-collision} error, unless the optional @var{FORCE} argument
is non-@code{nil}.

@defun unregister-format-table NAME
Unregister @var{NAME}d table.
@end defun


@node Current Format Table, , Table Registration, Referring to Format Tables
@subsection Current Format Table
@cindex Current Format Table
@cindex Format Table, current
@vindex *format-table*
Unless otherwise specified, @focus{} uses a so-called @dfn{current
format table} every time it needs one. This table is stored in the
global variable @code{*format-table*}, which you are free to use
directly.

@focus{} also provides a couple of macros to manipulate the current
format table in a very idiomatic way.

@defmac with-format-table TABLE-OR-NAME &body BODY
Execute @var{BODY} with the current format table bound to
@var{TABLE-OR-NAME}.
@end defmac
@cindex Format Table Designator
@cindex Designator, format table
@var{TABLE-OR-NAME} is of course a table designator: either a table
object directly, or the name of a previously registered table.

@extindex{flv}
When the @code{flv} extension is available (@pxref{Optional Features})
@focus{} also defines a macro called @code{in-format-table}. You may
check for the availability of this macro by testing the presence of the
feature @code{:net.didierverna.focus.flv}.
@defmac in-format-table TABLE-OR-NAME
Set the current format table to @var{TABLE-OR-NAME} in the current file.
@end defmac
@cindex Format Table Designator
@cindex Designator, format table
@var{TABLE-OR-NAME} is again a table designator: either a table
object directly, or the name of a previously registered table.

This macro is meant to be used in a way similar to @code{in-package} or
@code{in-readtable}. It actually works the same way and lets you write
highliy idiomatic code like this:
@cartouche
@verbatim
(in-package      :my.library.name)
(in-format-table :my.library.name)
@end verbatim
@end cartouche

Remember however that there is a big difference between these two calls.
In the case of @code{in-package}, the keyword is a @emph{string
designator}. Your package really is named @code{"MY.LIBRARY.NAME"}. In
the case of @code{in-format-table}, your table really is named after the
symbol @code{MY.LIBRARY.NAME} interned into the @code{KEYWORD} package.

Finally, note that using @code{in-format-table} requires that the format
table in question be available at compile-time (@pxref{Compile or Run
Time}).


@c -----------------------
@c Modifying Format Tables
@c -----------------------
@node Modifying Format Tables, Using Format Tables, Referring to Format Tables, Usage
@section Modifying Format Tables
Customizing the contents of your format tables involves a single
function: @code{set-format-directive}.

@vindex *format-table*
@defun set-format-directive CHAR @
&key STANDARD FUNCTION (BOTH-CASE t) FORCE (TABLE *format-table*)
Set a ~@var{CHAR} directive in @var{TABLE}.
@end defun

@cindex Current Format Table
@cindex Format Table, current
@cindex Format Table Designator
@cindex Designator, format table
@fkindex{set-format-directive,table}@c
@var{TABLE} is the format table to modify. It defaults to the current
format table, and may otherwise be specified by passing a table
designator as value to the @code{:table} keyword argument.

@menu
* Directive Characters::        You can (re)define all of them
* Casing::                      Case matters to XFormat
* Directive Definition::        What they should do
* Directive Removal::           What they should not do anymore
@end menu

@node Directive Characters, Casing, Modifying Format Tables, Modifying Format Tables
@subsection Directive Characters
@var{CHAR} is the character for which you want to create a new directive
(@ref{Quick Start} used @code{#\`} as an example). Note that @focus{}
allows you to modify standard directives as well as creating new
ones. This means that you can create a completely new directive, freely
override a standard directive with a new meaning, alias a standard
directive to a new character, anything you want.

@fkindex{set-format-directive,force}@c
@errindex{table-directive-collision}@c
If such a directive is already set in @var{TABLE}, @focus{} throws a
@code{table-directive-collision} error, unless you explicitely pass a
non-@code{nil} value to the @code{:force} keyword argument.

@node Casing, Directive Definition, Directive Characters, Modifying Format Tables
@subsection Casing
@cindex Directive Casing
@cindex Casing, directive
@findex make-format-table
@foindex{make-format-table,initially}@c
In the @cl{} standard, the case of a directive character is ignored. On
the contrary, case @emph{does} matter to @focus{}. A format table
contains separate entries for upcase and downcase characters (when
applicable of course). By the way, this begins as soon as you create a
new table (@pxref{Creating Format Tables} and remember the optional
@var{INITIALLY} argument to @code{make-format-table}).

By default, the behavior of @code{set-format-directive} conforms to that
of the standard however: when you set a new directive character that has
both an upcase and a downcase version, both versions get the definition.

@fkindex{set-format-directive,both-case}@c
You can change this behavior by passing a @code{nil} value to the
@code{:both-case} keyword argument, hence distinguishing between case
versions. As an example, consider the case@footnote{so to speak@dots{}}
where you find yourself short of directive characters. What you can do
is retain the standard meaning for all the upcase versions and define
new custom directives for the downcase ones. Or the other way
around. yOu gEt tHe iDeA.

@node Directive Definition, Directive Removal, Casing, Modifying Format Tables
@subsection Directive Definition
There are currently two ways to define new directives in @focus{}: you
can either assign them the meaning of a standard directive, or associate
them with a custom formatter.

@menu
* Standard Directives:: Standard behavior
* Custom Formatters::   User-defined behavior
@end menu

@node Standard Directives, Custom Formatters, Directive Definition, Directive Definition
@subsubsection Standard Directives
@cindex Standard Directive
@cindex Directive, standard
@fkindex{set-format-directive,standard}@c
@foindex{make-format-table,initially}@c
In order to use a standard directive, use the @code{:standard} keyword
with the corresponding character as value. For instance, calling
@samp{(set-format-directive #\Y :standard #\S)} will result in making
@code{~Y} (and @code{~y} by default, see @ref{Casing}) have the same
meaning as the standard @code{~S} directive. By the way, this is how a
newly created format table is made @code{:initially} @code{:standard}:
for every standard directive character @code{#\c}, a call to
@samp{(set-format-directive #\c :standard #\c)} is issued.

@cindex Simple Directive
@cindex Directive, simple
@cindex Grouping Directive
@cindex Directive, grouping
@cindex Delimiting Directive
@cindex Directive, delimiting
One thing about aliasing standard directives is worth mentioning here.
@focus{} is aware of the syntactic specificities of the standard
directives. More precisely, we can split standard directives in three
categories: @emph{simple} directives like @code{~S}, @emph{grouping}
directives like @code{~@{~@}} which use a couple of characters
and @emph{delimiting} directives in which there is only one guy: the
@code{~/} directive.

@focus{} does nothing special about simple and grouping directives. In
particular, you can very well alias only one of the two characters of a
standard grouping directive (see, it's pretty easy to completely mess up
the standard set of directives). Or, to put it differently, creating a
new grouping directive couple would involve @emph{two} calls to
@code{set-format-directive}, for example like this:
@verbatim
(set-format-directive #\` :standard #\{)
(set-format-directive #\' :standard #\})
@end verbatim

On the other hand, @focus{} understands when you alias the @code{~/}
directive, and expects your custom format strings to be syntactically
correct. For instance, if you alias @code{~!} to @code{~/}, then your format
strings should look like this: @code{"~!foo:bar!"}. It is @emph{not}
possible to match a @code{#\/} with a @code{#\!}, in any order.

@node Custom Formatters, , Standard Directives, Directive Definition
@subsubsection Custom Formatters
@cindex Custom Formatter
@cindex Formatter, custom
@cindex Function Designator
@cindex Designator, function
@fkindex{set-format-directive,standard}@c
@fkindex{set-format-directive,function}@c
In order to associate a directive character with a custom formatter
function, use the @code{:function} keyword instead of the
@code{:standard} one (@pxref{Quick Start} for an example). It is
expected that you provide a @dfn{function designator} as a value, that
is, a function name, object, or even a lambda expression.

The function in question must comply with the regular formatter
protocol, as such custom directives are eventually translated into
standard @code{~/} ones.

@node Directive Removal, , Directive Definition, Modifying Format Tables
@subsection Directive Removal
@findex set-format-directive
@fkindex{set-format-directive,standard}@c
@fkindex{set-format-directive,function}@c
In order to remove a directive from a format table, simply call
@code{set-format-directive} without any definition, that is, without
using the @code{:standard} or @code{:function} keyword arguments. For
instance, a call to @samp{(set-format-directive #\s)} will remove the
definition for both @code{~s} and @code{~S} (but then again, see
@ref{Casing}) from the current format table.


@c -------------------
@c Using Format Tables
@c -------------------
@node Using Format Tables, Compile or Run Time, Modifying Format Tables, Usage
@section Using Format Tables
@focus{} provides its own version of @fmt{}.
@defmac format DESTINATION FORMAT-CONTROL &rest ARGS
Wrapper around the standard @fmt{} function.
@end defmac

@focus{}'s @fmt{} wraps around the standard one. When
@var{FORMAT-CONTROL} is a format string, it is translated into a
standard one according to the current format table. That's it.

The reason why @focus{}'s @fmt{} is a macro will be explained in
@ref{Compile or Run Time}.


@c -------------------
@c Compile or Run Time
@c -------------------
@node Compile or Run Time, , Using Format Tables, Usage
@section Compile or Run Time
@cindex Current Format Table
@cindex Format Table, current
Normally, @focus{} behaves dynamically, meaning that the translation to
standard @fmt{} calls occurs at run-time. This is the default behavior
because it allows for maximum flexibility@dots{} and weirdness,
admitedly, as the same call to @focus{}'s @fmt{} may behave differently
if the current format table has changed in the meantime. The drawback of
this approach, however, is that it induces a run-time overhead, which
may become undesirable in format-intensive applications.

@vindex *compile*
One way around this is to have your format table known at compile-time
and instruct @focus{} to perform a compile-time translation
instead. This way, all dynamic trace of @focus{} will disappear from
your application. This can be done by setting the @code{*compile*} flag
to a non-nil value (at compile-time of course!). By the way, this also
explains why @fmt{} is a macro instead of a regular function in
@focus{}.

@extindex{flv}
@findex in-format-table
When the @code{flv} extension is available (@pxref{Optional Features}),
this variable is automatically made file-local, and
@code{in-format-table} sets it to @code{t}, so that you don't have
anything to do to switch to compile-time behavior. The
@file{demos/quotation} library in the distribution provides an example
of using @focus{} in such a way.

Finally, when compile-time behavior is switched on, you may also use
@focus{}'s wrapper around the @code{formatter} macro.
@defmac formatter FORMAT-STRING
Wrapper around the standard FORMATTER macro.
@end defmac



@c ====================================================================
@c Miscellaneous
@c ====================================================================
@node Miscellaneous, Conclusion, Usage, Top
@chapter Miscellaneous

This section contains information about different features that are
present in @focus{} because of design decisions, but that I expect to be
used only rarely, if at all.

@menu
* Version Numbering::           In case you need to conditionalize
@end menu


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering, , , Miscellaneous
@section Version Numbering

As @focus{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@focus{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @focus{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

@c #### WARNING: pvindex spits spurious newlines in itemized lists.
A @focus{} version is characterized by 4 elements as described below.
@itemize
@item
@vindex *release-major-level*@r{, parameter}
@vindex @r{Parameter, }*release-major-level*
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@vindex *release-minor-level*@r{, parameter}
@vindex @r{Parameter, }*release-minor-level*
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@vindex *release-status*@r{, parameter}
@vindex @r{Parameter, }*release-status*
A release status stored in the parameter
@code{*release-status*}. The status of a release can be @code{:alpha},
@code{:beta}, @code{:rc} (standing for ``release candidate'') or
@code{:patchlevel}. These are in effect 4 levels of expected stability.
@item
@vindex *release-status-level*@r{, parameter}
@vindex @r{Parameter, }*release-status-level*
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{release-name}
In addition to that, each version of @focus{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @focus{}
is ``Aïkido movements''.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major . 10000 + minor .
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Kote Gaeshi", 2.5 beta 8 "Irimi
Nage", 4.2 release candidate 1 "San Kyo" or 4.3.2 "Suwari Wasa Shomen
Uchi Ikkyo". As for the short version, a patchlevel of 0 is ignored in
the output: 1.3 "Ju Wasa".
@end itemize



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Technical Notes, Miscellaneous, Top
@chapter Conclusion

So that's it I guess. You know all about @focus{} now. The next step is
to actually use it and make your format strings even less readable than
the original ones.

Now, go my friend. Go obfuscate your Lisp printing code!



@c ====================================================================
@c Technical Notes
@c ====================================================================
@node Technical Notes, Indexes, Conclusion, Top
@appendix Technical Notes

This chapter contains important information about the library's
configuration and optional features.

@menu
* Configuration::       Pre-loading parameters
* Optional Features::   Additional bells and whistles
* Supported Platforms:: Systems, compilers and dependencies
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Supported Platforms, Technical Notes, Technical Notes
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.focus.setup}@c
@pkgindex{net.didierverna.focus.setup}@c
Some aspects of @focus{}'s behavior can be configured @emph{before} the
library system is actually loaded. @focus{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.focus.setup} (and the eponym
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.focus.setup)
(net.didierverna.focus.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @focus{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @focus{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @focus{} itself. The library provides indentation information
for some of its functions directly embedded in the code. This
information can be automatically transmitted to (X)Emacs when the ASDF
system is loaded if you set this option to @code{t}. However, note that
for this to work, the Slime variable
@code{slime-enable-evaluate-in-emacs} must also be set to @code{t} in
your (X)Emacs session. If you're interested to know how this process
works, I have described it in the following blog entry:
@uref{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack}.
@item :restricted
@coindex{restricted}@c
@cindex Restricted Mode
@sysindex{net.didierverna.focus.core}
Some features of @focus{} require external functionality that may not be
available in all contexts. Normally, @focus{} should autodetect this and
switch to so-called @emph{restricted mode} at build-time
(@pxref{Optional Features}). If @focus{} has failed to autodetect the
problem (in which case I would like to know), or if for some reason, you
explicitly want to disable those features, you may set the
@code{:restricted} configuration option to @code{t}. Another way to do
it, without even bothering with configuration is to just use the
@samp{net.didierverna.focus.core} system instead of the regular one.
@end table


@c -----------------
@c Optional Features
@c -----------------
@node Optional Features, Supported Platforms, Configuration, Technical Notes
@section Optional Features
@cindex Current Format Table
@cindex Format Table, current
@vindex *format-table*
@vindex *package*
@vindex *readtable*
As seen in @ref{Current Format Table}, the current format table is
stored in the variable @code{*format-table*}. In many regards, this
variable looks very much like @code{*package*} or @code{*readtable*} and
we sure would like it to behave in the same way, notably with respect to
@code{load} and @code{compile-file}.

@cindex File-Local Variable
@cindex Variable, file-local
Standard @cl{} doesn't allow this, but fortunately, there is one
workaround. ASDF has an extension called
@url{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#asdf-flv,
@samp{asdf-flv}}, also written by me, which essentially allows one to
define any number of @dfn{file-local} variables, behaving like
@code{*package*} or @code{*readtable*} with respect to @code{load} and
@code{compile-file}.

@featindex{net.didierverna.focus.flv}
Normally, @focus{} automatically detects the availability of this
extension, and if applicable, makes the variable @code{*format-table*}
file-local and defines the @code{in-format-table} macro. It also puts
@code{:net.didierverna.focus.flv} on @code{*features*} so that you may
conditionalize your code accordingly.

@sysindex{net.didierverna.focus.flv}
@focus{} can be used without this extension, but if you want to make it
a strong requirement, you may load the system
@samp{net.didierverna.focus.flv} instead of the regular one. Loading it
will fail if @code{asdf-flv} isn't available.


@c ----------------------
@c Supported Platforms
@c ----------------------
@node Supported Platforms, , Configuration, Technical Notes
@section Supported Platforms

@focus{} is an ASDF 3 library. It doesn't have any system, platform or
compiler-specific requirement, so portability problems should be
regarded as bugs, and reported to @email{didier@@didierverna.net, me}
(please). This includes potential problems using either the standard or
modern version of Allegro @cl{}.

@focus{} optionally depends on @samp{asdf-flv} for providing the
@code{in-format-table} macro (@pxref{Optional Features}).



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Technical Notes, Top
@appendix Indexes

@menu
* Concept Index::       Well, the concept index
* Function Index::      Well, the function index
* Variable Index::      Well, the variable index
* Data Type Index::     Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index, , Variable Index, Indexes
@section Data Types
@printindex tp


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c user.texi ends here

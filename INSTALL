
2 Installation
**************

*Note Supported Platforms::, for information on portability or
requirements.  See FoCus’s homepage for tarballs, Git repository and
online documentation.  FoCus is also available via Quicklisp.

   In order to install and load the bare Lisp library, unpack it
somewhere in the ASDF 3 source registry and type this at the REPL:
(asdf:load-system :net.didierverna.focus)
   Alternatively, if you just want to use the core library without the
extensions (*note Technical Notes::), you can also just load the
‘net.didierverna.focus.core’ system.

   In addition to the bare Lisp library, the FoCus distribution offers
documentation in the form of 2 different manuals.  If you want to
benefit from all those wonders, some bits of manual installation are
needed.  After unpacking somewhere in the ASDF 3 source registry, please
perform the following steps, in order.

  1. Edit ‘make/config.make’ to your specific needs.
  2. Type ‘make’ to compile the documentation (user manual and lpossibly
     reference manual).  By default, the documentation is built in info,
     PDF and HTML formats.  If you want other formats (DVI and
     PostScript are available), type ‘make all-formats’.  You can also
     type individually ‘make dvi’ and/or ‘make ps’ in order to get the
     corresponding format.
  3. As documented in ‘make/config.make’, the reference manual is only
     generated if you have SBCL and the Declt library at hand (see
     <http://www.lrde.epita.fr/~didier/software/lisp/misc.php#declt>).
  4. Type ‘make install’ to install the documentation.  If you have
     compiled the documentation in DVI and PostScript format, those will
     be installed as well.

   Type ‘make uninstall’ to uninstall the library.


A.1 Configuration
=================

Some aspects of FoCus’s behavior can be configured _before_ the library
system is actually loaded.  FoCus stores its user-level configuration
(along with some other setup parameters) in another ASDF system called
‘net.didierverna.focus.setup’ (and the eponym package).  In order to
configure the library (I repeat, prior to loading it), you will
typically do something like this:
(require "asdf")
(asdf:load-system :net.didierverna.focus.setup)
(net.didierverna.focus.setup:configure <option> <value>)

 -- Function: configure KEY VALUE
     Set KEY to VALUE in the current FoCus configuration.

   Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
 -- Function: configuration KEY
     Return KEY’s value in the current FoCus configuration.

   Currently, the following options are provided.
:swank-eval-in-emacs
     This option is only useful if you use Slime, and mostly if you plan
     on hacking FoCus itself.  The library provides indentation
     information for some of its functions directly embedded in the
     code.  This information can be automatically transmitted to
     (X)Emacs when the ASDF system is loaded if you set this option to
     ‘t’.  However, note that for this to work, the Slime variable
     ‘slime-enable-evaluate-in-emacs’ must also be set to ‘t’ in your
     (X)Emacs session.  If you’re interested to know how this process
     works, I have described it in the following blog entry:
     <http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack>.
:restricted
     Some features of FoCus require external functionality that may not
     be available in all contexts.  Normally, FoCus should autodetect
     this and switch to so-called _restricted mode_ at build-time (*note
     Optional Features::).  If FoCus has failed to autodetect the
     problem (in which case I would like to know), or if for some
     reason, you explicitly want to disable those features, you may set
     the ‘:restricted’ configuration option to ‘t’.  Another way to do
     it, without even bothering with configuration is to just use the
     ‘net.didierverna.focus.core’ system instead of the regular one.


A.3 Supported Platforms
=======================

FoCus is an ASDF 3 library.  It doesn’t have any system, platform or
compiler-specific requirement, so portability problems should be
regarded as bugs, and reported to me <didier@didierverna.net> (please).
This includes potential problems using either the standard or modern
version of Allegro Common Lisp.

   FoCus optionally depends on ‘asdf-flv’ for providing the
‘in-format-table’ macro (*note Optional Features::).

